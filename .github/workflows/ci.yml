name: CI/CD - FFMPEG MCP Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ffmpeg-mcp-ci

jobs:
  # Job 1: Unit and Integration Tests
  test-unit-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install UV
      run: pip install uv
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg mediainfo libsndfile1
        ffmpeg -version
    
    - name: Install Python dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv sync --group dev
    
    - name: Create test directories
      run: |
        mkdir -p /tmp/music/{source,temp,metadata,screenshots}
        cp tests/files/* /tmp/music/source/ || true
    
    - name: Run unit tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/ci/test_unit_core.py -v --tb=short
    
    - name: Run integration tests  
      run: |
        source .venv/bin/activate
        python -m pytest tests/ci/test_integration_basic.py -v --tb=short
    
    - name: Run MCP server tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/ci/test_mcp_server.py -v --tb=short
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-unit-integration
        path: |
          /tmp/music/temp/
          pytest-results.xml
        retention-days: 7

  # Job 2: End-to-End Video Processing Tests
  test-e2e-video:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test-unit-integration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install UV and dependencies
      run: |
        pip install uv
        sudo apt-get update
        sudo apt-get install -y ffmpeg mediainfo libsndfile1 libopencv-dev
    
    - name: Install Python dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv sync --group dev
    
    - name: Set up test environment
      run: |
        mkdir -p /tmp/music/{source,temp,metadata,screenshots}
        cp tests/files/* /tmp/music/source/ || true
        
    - name: Run workflow tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/ci/test_workflow_minimal.py -v --tb=short
    
    - name: Run video validation
      run: |
        source .venv/bin/activate
        python scripts/video_validator.py
    
    - name: Test MCP server shell script
      run: |
        source .venv/bin/activate
        export PYTHONPATH="/github/workspace/src:/github/workspace"
        timeout 300 tests/ci/test_mcp_server.sh || echo "Shell test completed with timeout"
    
    - name: Upload video artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-videos-e2e
        path: |
          /tmp/music/temp/*.mp4
          /tmp/music/temp/*.avi
        retention-days: 14

  # Job 3: Docker Container Tests
  test-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build CI Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.ci
        target: ci-test
        tags: ffmpeg-mcp-ci:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Docker-based tests
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/test-results:/app/test-results \
          ffmpeg-mcp-ci:latest
    
    - name: Test Docker speech detection
      run: |
        docker run --rm \
          -v /tmp/music:/tmp/music \
          ffmpeg-mcp-ci:latest \
          python tests/docker/test_lookin_docker.py || echo "Speech test completed"
    
    - name: Upload Docker test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-test-results
        path: test-results/
        retention-days: 7

  # Job 4: Performance & Security Tests
  test-performance-security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test-unit-integration, test-e2e-video]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        pip install uv bandit safety
        uv venv
        source .venv/bin/activate
        uv sync --group dev
    
    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-results.json || true
        bandit -r src/ || echo "Security scan completed with findings"
    
    - name: Dependency vulnerability check
      run: |
        safety check --json --output safety-results.json || true
        safety check || echo "Dependency check completed"
    
    - name: Performance benchmarks
      run: |
        source .venv/bin/activate
        mkdir -p /tmp/music/{source,temp,metadata}
        cp tests/files/* /tmp/music/source/ || true
        python scripts/video_validator.py
    
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          safety-results.json
        retention-days: 30

  # Job 5: Build and Test Documentation
  test-documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate markdown files
      run: |
        find . -name "*.md" -type f | head -10 | while read file; do
          echo "Checking $file"
          # Basic markdown validation
          if [[ $(wc -l < "$file") -lt 5 ]]; then
            echo "Warning: $file is very short"
          fi
        done
    
    - name: Check documentation links
      run: |
        echo "Checking for broken documentation links..."
        grep -r "](.*\.md)" --include="*.md" . || echo "No markdown links found"
    
    - name: Validate project structure
      run: |
        required_files=(
          "README.md"
          "CLAUDE.md" 
          "pyproject.toml"
          "src/server.py"
          "tests/ci/"
          "Dockerfile.ci"
        )
        
        for file in "${required_files[@]}"; do
          if [[ -e "$file" ]]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done

  # Summary job
  ci-summary:
    runs-on: ubuntu-latest
    needs: [test-unit-integration, test-e2e-video, test-docker, test-performance-security, test-documentation]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "🎉 CI/CD Pipeline Complete!"
        echo "Unit/Integration: ${{ needs.test-unit-integration.result }}"
        echo "E2E Video: ${{ needs.test-e2e-video.result }}"  
        echo "Docker: ${{ needs.test-docker.result }}"
        echo "Performance/Security: ${{ needs.test-performance-security.result }}"
        echo "Documentation: ${{ needs.test-documentation.result }}"
        
        if [[ "${{ needs.test-unit-integration.result }}" == "success" && 
              "${{ needs.test-e2e-video.result }}" == "success" && 
              "${{ needs.test-documentation.result }}" == "success" ]]; then
          echo "🎊 All critical tests passed!"
        else
          echo "⚠️ Some tests failed - check individual job results"
        fi